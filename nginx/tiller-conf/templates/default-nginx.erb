<% endpoints.each do |endpoint| %>
    <% if endpoint['port'] == 443 and endpoint['sslOnly'] %>
        server {
            listen 80;
            <%if endpoint['name'] %>server_name <%= endpoint['name']%>;<%end%>
            location '/.well-known/acme-challenge' {
                default_type "text/plain";
                root /tmp/letsencrypt-auto;
            }

            location / {
                add_header Strict-Transport-Security max-age=15768000;
                return 301 https://$host$request_uri;
            }
        }
    <%end%>
server {
    listen <%= endpoint['port'] ||=80 %> <%if endpoint['port'] == 443%>ssl<%end%>;
    <%if endpoint['name'] %>server_name <%= endpoint['name']%>;<%end%>
    <%if endpoint['port'] == 443 %>
        <% certRoot = endpoints.select{|e|e['name'] and e['port'] == 443}.first['name'] %>
        ssl_certificate     /etc/letsencrypt/live/<%=certRoot%>/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/<%=certRoot%>/privkey.pem;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_prefer_server_ciphers on;
    <% end %>
    location / {
        add_header Strict-Transport-Security max-age=15768000;
        proxy_pass <%= endpoint['protocol'] ||="http"%>://<%= endpoint['target'] %>:<%= endpoint['targetPort'] %><%= endpoint['path'] if defined?(endpoint['path']) %>;
        proxy_set_header        Host            $host;
        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
    }
}
<% end %>

<% if defined?(default) %>
server {
   listen 80 default_server;
   server_name _;

   return 301 <%= default%>;
}
<% end %>
